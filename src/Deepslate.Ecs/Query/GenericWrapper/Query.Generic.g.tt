<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ include file="../../Constants.ttinclude"#>
using System.Runtime.CompilerServices;

namespace Deepslate.Ecs.GenericWrapper;

#nullable enable

<#
    foreach (var writableGenericParameterCount in Enumerable.Range(0, MaxGenericParameters + 1))
    {
        var writableGenericParameters = string.Join(", ",
            Enumerable.Range(1, writableGenericParameterCount).Select(i => $"TWritable{i}"));
        writableGenericParameters = writableGenericParameterCount > 0 ? $"<{writableGenericParameters}>" : "";

        var writableGenericParametersWhere = string.Concat(
            Enumerable.Range(1, writableGenericParameterCount).Select(i => $"    where TWritable{i} : IComponent\n"));
#>
public partial struct Writable<#= writableGenericParameters #>
<#= writableGenericParametersWhere #>{
<#
        foreach (var readOnlyGenericParameterCount in Enumerable.Range(0, MaxGenericParameters + 1))
        {
            var readOnlyGenericParameters = string.Join(", ", 
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i => $"TReadOnly{i}"));
            readOnlyGenericParameters = readOnlyGenericParameterCount > 0 ? $"<{readOnlyGenericParameters}>" : "";

            var readOnlyGenericParametersWhere = string.Concat(
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i => $"        where TReadOnly{i} : IComponent\n"));

            var writableStorages = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"            private readonly IComponentStorage<TWritable{i}>[] _writeable{i}Storages = query.GetStorages<TWritable{i}>();"));

            var readOnlyStorages = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"            private readonly IComponentStorage<TReadOnly{i}>[] _readOnly{i}Storages = query.GetStorages<TReadOnly{i}>();"));

            var dataWritableGenericArguments = string.Join(", ", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"TWritable{i}"));

            var dataReadOnlyGenericArguments = string.Join(", ", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"TReadOnly{i}"));

            var dataGenericArguments = dataWritableGenericArguments + dataReadOnlyGenericArguments;
            if (writableGenericParameterCount > 0 && readOnlyGenericParameterCount > 0)
            {
                dataGenericArguments = string.Join(", ",
                    dataWritableGenericArguments,
                    dataReadOnlyGenericArguments);
            }
            if (writableGenericParameterCount + readOnlyGenericParameterCount > 0)
            {
                dataGenericArguments = $"<{dataGenericArguments}>";
            }

            var currentEntityComponentBundleWritableInitialization = string.Join(",\n",
                Enumerable.Range(1, writableGenericParameterCount)
                    .Select(i => $"                WritableComponent{i} = ref Data.CurrentArchetypeDataSpan.Component{i}Span[Data.CurrentIndex]"));

            var currentEntityComponentBundleReadOnlyInitialization = string.Join(",\n",
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i => $"                ReadOnlyComponent{i} = ref Data.CurrentArchetypeDataSpan.Component{i + writableGenericParameterCount}Span[Data.CurrentIndex]"));

            var currentEntityComponentBundleInitialization = currentEntityComponentBundleWritableInitialization +
                                                       currentEntityComponentBundleReadOnlyInitialization;
            if (writableGenericParameterCount > 0 && readOnlyGenericParameterCount > 0)
            {
                currentEntityComponentBundleInitialization = string.Join(",\n",
                    currentEntityComponentBundleWritableInitialization,
                    currentEntityComponentBundleReadOnlyInitialization);
            }

            var writableFields = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"            public ref TWritable{i} WritableComponent{i};"));

            var readOnlyFields = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"            public ref readonly TReadOnly{i} ReadOnlyComponent{i};"));
#>
    public partial struct ReadOnly<#= readOnlyGenericParameters #>
<#= readOnlyGenericParametersWhere #>    {
        public readonly struct Query(Deepslate.Ecs.Query query)
        {
            private readonly Deepslate.Ecs.Query _query = query;

<#= writableStorages #>
<#= readOnlyStorages #>

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public EntityComponentEnumerator GetEnumerator() => new() { Data = new(_query.MatchedArchetypes) };
        }

        public readonly struct Query<TArchetypeCommand>(Deepslate.Ecs.Query query)
            where TArchetypeCommand : struct, IArchetypeCommand<TArchetypeCommand>
        {
            private readonly Deepslate.Ecs.Query _query = query;

<#= writableStorages #>
<#= readOnlyStorages #>

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public EntityComponentEnumerator<TArchetypeCommand> GetEnumerator() => new() { Data = new(_query.MatchedArchetypes) };
        }

        public ref struct EntityComponentEnumerator
        {
            internal EntityComponentEnumeratorData<#= dataGenericArguments #> Data;

            public EntityComponentBundle Current => new()
            {
                Entity = Data.CurrentArchetypeDataSpan.EntitySpan[Data.CurrentIndex],
<#= currentEntityComponentBundleInitialization #>
            };

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Reset() => Data.Reset();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext() => Data.MoveNext();
        }

        public ref struct EntityComponentEnumerator<TArchetypeCommand>
            where TArchetypeCommand : struct, IArchetypeCommand<TArchetypeCommand>
        {
            internal EntityComponentEnumeratorData<#= dataGenericArguments #> Data;

            public EntityComponentBundle<TArchetypeCommand> Current => new()
            {
                ArchetypeCommand = TArchetypeCommand.Create(Data.CurrentArchetype),
                Entity = Data.CurrentArchetypeDataSpan.EntitySpan[Data.CurrentIndex],
<#= currentEntityComponentBundleInitialization #>
            };

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Reset() => Data.Reset();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext() => Data.MoveNext();
        }

        public ref struct EntityComponentBundle
        {
            public Entity Entity;
<#= writableFields #>
<#= readOnlyFields #>
        }

        public ref struct EntityComponentBundle<TArchetypeCommand>
            where TArchetypeCommand : struct, IArchetypeCommand<TArchetypeCommand>
        {
            public TArchetypeCommand ArchetypeCommand;
            public Entity Entity;
<#= writableFields #>
<#= readOnlyFields #>
        }
    }
<#
        }
#>
}
<#
    }
#>
