<#@ template language="C#" #>
<#@ output extension="cs"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Linq" #>
<#@ include file="../../Constants.ttinclude"#>
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

namespace Deepslate.Ecs.GenericWrapper;

#nullable enable

<#
    foreach (var writableGenericParameterCount in Enumerable.Range(0, MaxGenericParameters + 1))
    {
        var writableGenericParameters = string.Join(", ",
            Enumerable.Range(1, writableGenericParameterCount).Select(i => $"TWritable{i}"));
        writableGenericParameters = writableGenericParameterCount > 0 ? $"<{writableGenericParameters}>" : "";

        var writableGenericParametersWhere = string.Concat(
            Enumerable.Range(1, writableGenericParameterCount).Select(i => $"    where TWritable{i} : IComponent\n"));
#>
public partial struct Writable<#= writableGenericParameters #>
<#= writableGenericParametersWhere #>{
<#
        foreach (var readOnlyGenericParameterCount in Enumerable.Range(0, MaxGenericParameters + 1))
        {
            var readOnlyGenericParameters = string.Join(", ", 
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i => $"TReadOnly{i}"));
            readOnlyGenericParameters = readOnlyGenericParameterCount > 0 ? $"<{readOnlyGenericParameters}>" : "";

            var readOnlyGenericParametersWhere = string.Concat(
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i => $"        where TReadOnly{i} : IComponent\n"));

            var writableStorages = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"            private IComponentStorage<TWritable{i}>[] _writable{i}Storages = default!;"));

            var readOnlyStorages = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"            private IComponentStorage<TReadOnly{i}>[] _readOnly{i}Storages = default!;"));

            var writableStoragesInitialization = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"                _writable{i}Storages = TypelessQuery.GetStorages<TWritable{i}>();"));
            
            var readOnlyStoragesInitialization = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"                _readOnly{i}Storages = TypelessQuery.GetStorages<TReadOnly{i}>();"));
            
            var writableSpanFields = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"                private Span<TWritable{i}> _writable{i}Span = Span<TWritable{i}>.Empty;"));

            var readOnlySpanFields = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"                private Span<TReadOnly{i}> _readOnly{i}Span = Span<TReadOnly{i}>.Empty;"));
            
            var entityComponentBundleWritableInitialization = string.Join("\n",
                Enumerable.Range(1, writableGenericParameterCount)
                    .Select(i => $"                        WritableComponent{i} = ref _writable{i}Span[_currentIndex],"));

            var entityComponentBundleReadOnlyInitialization = string.Join("\n",
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i => $"                        ReadOnlyComponent{i} = ref _readOnly{i}Span[_currentIndex],"));
            
            var writableSpanUpdate = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"                        _writable{i}Span = _query._writable{i}Storages[_currentArchetypeIndex].AsSpan();"));
            
            var readOnlySpanUpdate = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"                        _readOnly{i}Span = _query._readOnly{i}Storages[_currentArchetypeIndex].AsSpan();"));

            var writableFields = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"                    public ref TWritable{i} WritableComponent{i};"));

            var readOnlyFields = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"                    public ref readonly TReadOnly{i} ReadOnlyComponent{i};"));
            
            var writableSpanPublicFields = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"                    public Span<TWritable{i}> Writable{i}Span {{ get; private set; }} = Span<TWritable{i}>.Empty;"));
            
            var readOnlySpanPublicFields = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"                    public ReadOnlySpan<TReadOnly{i}> ReadOnly{i}Span {{ get; private set; }} = ReadOnlySpan<TReadOnly{i}>.Empty;"));
            
            var writableSpanPublicFieldsInitialization = string.Join("\n", Enumerable.Range(1, writableGenericParameterCount)
                .Select(i => $"                        Writable{i}Span = Archetype.GetComponents<TWritable{i}>(Range.All);"));
            
            var readOnlySpanPublicFieldsInitialization = string.Join("\n", Enumerable.Range(1, readOnlyGenericParameterCount)
                .Select(i => $"                        ReadOnly{i}Span = Archetype.GetComponents<TReadOnly{i}>(Range.All);"));
#>
    public partial struct ReadOnly<#= readOnlyGenericParameters #>
<#= readOnlyGenericParametersWhere #>    {
        public struct Query(Deepslate.Ecs.Query query)
        {
            public readonly Deepslate.Ecs.Query TypelessQuery = query;

<#= writableStorages #>
<#= readOnlyStorages #>
            
            public Enumerator GetEnumerator() => new Enumerator(this);

            public EnumerableStorages Storages => new EnumerableStorages(TypelessQuery.MatchedArchetypes);

            public void PostInitialize()
            {
<#= writableStoragesInitialization #>
<#= readOnlyStoragesInitialization #>
            }

            public ref struct Enumerator
            {
                private readonly Query _query;

                private int _currentArchetypeIndex = -1;
                private int _currentIndex = -1;

                private int _currentCount = 0;

                private ReadOnlySpan<Entity> _entities = ReadOnlySpan<Entity>.Empty;
<#= writableSpanFields #>
<#= readOnlySpanFields #>
                
                private EntityComponentBundle _cachedResult = default;

                internal Enumerator(Query query)
                {
                    _query = query;
                }

                [UnscopedRef]
                public ref EntityComponentBundle Current => ref _cachedResult;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public bool MoveNext()
                {
                    if (++_currentIndex < _currentCount)
                    {
                        UpdateResult();
                        return true;
                    }

                    _currentIndex = 0;

                    var archetypes = _query.TypelessQuery.MatchedArchetypes;
                    var archetypeCount = archetypes.Count;
                    while (++_currentArchetypeIndex < archetypeCount && archetypes[_currentArchetypeIndex].Count == 0)
                    {
                    }

                    var success = _currentArchetypeIndex < archetypeCount;
                    if (success)
                    {
                        _currentCount = archetypes[_currentArchetypeIndex].Count;
                        _entities = archetypes[_currentArchetypeIndex].Entities;
<#= writableSpanUpdate #>
<#= readOnlySpanUpdate #>
                        UpdateResult();
                    }

                    return success;
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public void Reset()
                {
                    _currentArchetypeIndex = -1;
                    _currentIndex = -1;
                    _cachedResult = default;
                }

                private void UpdateResult()
                {
                    _cachedResult = new EntityComponentBundle
                    {
<#= entityComponentBundleWritableInitialization #>
<#= entityComponentBundleReadOnlyInitialization #>
                        Entity = _entities[_currentIndex],
                        Archetype = _query.TypelessQuery.MatchedArchetypes[_currentArchetypeIndex]
                    };
                }

                public ref struct EntityComponentBundle
                {
                    public Archetype Archetype;
                    public Entity Entity;
<#= writableFields #>
<#= readOnlyFields #>
                }
            }

            public ref struct EnumerableStorages
            {
                private readonly ReadOnlySpan<Archetype> _archetypes;

                internal EnumerableStorages(IReadOnlyList<Archetype> archetypes)
                {
                    _archetypes = (Archetype[])archetypes;
                }

                public ArchetypeEnumerator GetEnumerator() => new(_archetypes);
            }

            public ref struct ArchetypeEnumerator
            {
                private ReadOnlySpan<Archetype>.Enumerator _enumerator;

                public StorageSpan Current => new(_enumerator.Current);
                
                internal ArchetypeEnumerator(ReadOnlySpan<Archetype> archetypes)
                {
                    _enumerator = archetypes.GetEnumerator();
                }
                
                public bool MoveNext() => _enumerator.MoveNext();
                
                public ref struct StorageSpan
                {
                    public Archetype Archetype { get; } = Archetype.Empty;

                    public int Count { get; private set; } = 0;
                    public ReadOnlySpan<Entity> Entities { get; private set; } = ReadOnlySpan<Entity>.Empty;
<#= writableSpanPublicFields #>
<#= readOnlySpanPublicFields #>

                    internal StorageSpan(Archetype archetype)
                    {
                        Archetype = archetype;
                        Update();
                    }

                    public void Update()
                    {
                        Count = Archetype.Count;
                        Entities = Archetype.Entities;
<#= writableSpanPublicFieldsInitialization #>
<#= readOnlySpanPublicFieldsInitialization #>
                    }
                }
            }
        }
    }
<#
        }
#>
}
<#
    }
#>
