<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ include file="../../Constants.ttinclude"#>
namespace Deepslate.Ecs.GenericWrapper;

#nullable enable

<#
    foreach (var genericParameterCount in Enumerable.Range(0, MaxGenericParameters * 2 + 1))
    {
        var genericParameters = string.Join(", ",
            Enumerable.Range(1, genericParameterCount).Select(i => $"TComponent{i}"));
        genericParameters = genericParameterCount > 0 ? $"<{genericParameters}>" : "";

        var genericParametersWhere = string.Concat(Enumerable.Range(1, genericParameterCount)
            .Select(i => $"    where TComponent{i} : IComponent\n"));
#>
internal ref struct EntityComponentEnumeratorData<#= genericParameters #>
<#= genericParametersWhere #>{
    private readonly Archetype[] _archetypes;
    internal ArchetypeDataSpan<#= genericParameters #> CurrentArchetypeDataSpan;

    private int _currentArchetypeIndex = -1;
    private int _currentIndex = -1;

    public int CurrentIndex => _currentIndex;
    public Archetype CurrentArchetype { get; private set; } = Archetype.Empty;

    internal EntityComponentEnumeratorData(IEnumerable<Archetype> archetypes)
    {
        _archetypes = archetypes.ToArray();
    }

    public bool MoveNext()
    {
        _currentIndex++;
        while (_currentArchetypeIndex < _archetypes.Length && _currentIndex >= CurrentArchetype.Count)
        {
            _currentArchetypeIndex++;
            _currentIndex = 0;
        }

        var success = _currentArchetypeIndex < _archetypes.Length;
        if (success)
        {
            CurrentArchetype = _archetypes[_currentArchetypeIndex];
            CurrentArchetypeDataSpan = new(CurrentArchetype, ..);
        }

        return success;
    }

    public void Reset()
    {
        _currentArchetypeIndex = -1;
        _currentIndex = -1;
    }
}

<#
    }
#>