<#@ template language="C#" #>
<#@ output extension="cs"#>
<#@ import namespace="System.Linq" #>
<#@ include file="../../Constants.ttinclude"#>
namespace Deepslate.Ecs.GenericWrapper;

#nullable enable

<#
    foreach (var writableGenericParameterCount in Enumerable.Range(0, MaxGenericParameters + 1))
    {
        var writableGenericParameters = string.Join(", ",
            Enumerable.Range(1, writableGenericParameterCount).Select(i => $"TWritable{i}"));
        writableGenericParameters = writableGenericParameterCount > 0 ? $"<{writableGenericParameters}>" : "";

        var writableGenericParametersWhere = string.Join("\n",
            Enumerable.Range(1, writableGenericParameterCount).Select(i => $"    where TWritable{i} : IComponentData"));
#>
public partial struct Writable<#= writableGenericParameters #>
<#= writableGenericParametersWhere #>{
<#
        foreach (var readOnlyGenericParameterCount in Enumerable.Range(0, MaxGenericParameters + 1))
        {
            var readOnlyGenericParameters = string.Join(", ", 
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i => $"TReadOnly{i}"));
            readOnlyGenericParameters = readOnlyGenericParameterCount > 0 ? $"<{readOnlyGenericParameters}>" : "";

            var readOnlyGenericParametersWhere = string.Join("\n",
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i => $"        where TReadOnly{i} : IComponentData"));
            
            var writablePartResultOfRequireWritable = string.Join(", ",
                Enumerable.Range(1, writableGenericParameterCount + 1)
                    .Select(i=> $"TWritable{i}"));
            writablePartResultOfRequireWritable = $"<{writablePartResultOfRequireWritable}>";
            
            var readOnlyPartResultOfRequireWritable = string.Join(", ",
                Enumerable.Range(1, readOnlyGenericParameterCount)
                    .Select(i=> $"TReadOnly{i}"));
            readOnlyPartResultOfRequireWritable = readOnlyGenericParameterCount > 0 ? $"<{readOnlyPartResultOfRequireWritable}>" : "";

            var readOnlyPartResultOfRequireReadOnly = string.Join(", ",
                Enumerable.Range(1, readOnlyGenericParameterCount + 1)
                    .Select(i=> $"TReadOnly{i}"));
            readOnlyPartResultOfRequireReadOnly = $"<{readOnlyPartResultOfRequireReadOnly}>";
            
            var nextWritableGenericParameter = $"TWritable{writableGenericParameterCount + 1}";
            var nextReadOnlyGenericParameter = $"TReadOnly{readOnlyGenericParameterCount + 1}";
#>
    public partial struct ReadOnly<#= readOnlyGenericParameters #>
<#= readOnlyGenericParametersWhere #>    {
        public readonly struct QueryBuilder(Deepslate.Ecs.QueryBuilder builder)
        {
            public Deepslate.Ecs.QueryBuilder TypelessBuilder { get; } = builder;

            public QueryBuilder With<TComponent>()
                where TComponent : IComponentData =>
                new(TypelessBuilder.With(typeof(TComponent)));

            public QueryBuilder Without<TComponent>()
                where TComponent : IComponentData =>
                new(TypelessBuilder.Without(typeof(TComponent)));

            public QueryBuilder WithFilter(Func<Archetype, bool> predicate) =>
                new(TypelessBuilder.WithFilter(predicate));

            public QueryBuilder RequireInstantArchetypeCommand() =>
                new(TypelessBuilder.RequireInstantArchetypeCommand());

<#
            if (writableGenericParameterCount < MaxGenericParameters)
            {
#>
            public Writable<#= writablePartResultOfRequireWritable #>.ReadOnly<#= readOnlyPartResultOfRequireWritable #>.QueryBuilder RequireWritable<<#= nextWritableGenericParameter #>>()
                where <#= nextWritableGenericParameter #> : IComponentData =>
                new(TypelessBuilder.RequireWritable(typeof(<#= nextWritableGenericParameter #>)));

<#
            }
            if (readOnlyGenericParameterCount < MaxGenericParameters)
            {
#>
            public ReadOnly<#= readOnlyPartResultOfRequireReadOnly #>.QueryBuilder RequireReadOnly<<#= nextReadOnlyGenericParameter #>>()
                where <#= nextReadOnlyGenericParameter #> : IComponentData =>
                new(TypelessBuilder.RequireReadOnly(typeof(<#= nextReadOnlyGenericParameter #>)));

<#
            }
#>
            public TickSystemBuilder Build(out Query registeredQuery)
            {
                var tickSystemBuilder = TypelessBuilder.Build(out var query);
                registeredQuery = new(query);
                return tickSystemBuilder;
            }

            public static implicit operator Deepslate.Ecs.QueryBuilder(QueryBuilder self) => self.TypelessBuilder;
        }
    }
<#
        }
#>
}
<#
    }
#>
